--------------------------------------------------
---basic push and pull to/from github:
1. git pull https://github.com/pr3d1c70r/DybLSPB

2. git remote add origin https://github.com/pr3d1c70r/DybLSPB
	1. git pull origin master
	2. git push --set-upstream origin master
	OR
	3. git push origin master
OR
3. git push --set-upstream https://github.com/pr3d1c70r/DybLSPB master

--------------------------------------------------
---if you want to delete commits without using git reset:
say you have commits A, B, C, D, E but you want to delete D and E.
!!!step 0: check if somewhere in D or E or in your uncommited local changes there is something that you DON'T want to destroy. If that is the case, save it in a safe file in a safe place. 
step 1: git checkout <commit C>  ("you are in detached HEAD etc.") (<good commit> is the first few characters of the commit hash)
step 2: git checkout -b good_branch ("switched to new branch good_branch")
step 3: git branch -m master bad_branch (renames master into bad_branch)
step 4: git branch -m good_branch master
(optional) step 5: git branch -D bad_branch (deletes the bad branch)
(optional) step 6: commit the stuff that you saved in step 0


--------------------------------------------------
---if you would like to commit stuff but you are afraid that there might be new commits on GitHub:
say you have commits 42aaaa, 42bbbb, 42cccc and local uncommitted changes. You want to pull from GitHub but this would destroy your local changes.
step 1: commit your (relevant) local changes (to your local repository, not to GitHub). If you don't want to commit everything, then save the rest in a safe place.
step 2: git branch -m master local_stuff (renames master into local_stuff)
step 3: git checkout 42cccc
step 4: git checkout -b master
step 5: git pull https://github.com/pr3d1c70r/DybLSPB
step 6: git merge local_stuff
(if needed) step 7: resolve possible merge issues (by hand). Then commit the files that had to be changed to solve the merge issues.
step 8: push to GitHub. 

--------------------------------------------------
---if you made a bad commit
scenario 1: The bad commit is already on GitHub: Bad Luck. Do not change the commit, because other people might already be based on this commit. Instead, push a new commit to GitHub that contains the necessary improvements.
scenario 2: The bad commit is not yet on GitHub:
step 1: make improvements and "git add" the relevant file(s).
step 2: git commit --amend -m "a new commit message"
DO NOT write only "git commit --amend" (without -m "..."). If you do that, you will fall into a text editor trap from which no one escapes.